package mycalculator.config;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

import mycalculator.function.ClearAction;
import mycalculator.function.MemoryAction;
import mycalculator.function.NumberAction;
import mycalculator.function.OperatorAction;
import mycalculator.function.TransformAction;
import mycalculator.utility.Register;
import mycalculator.utility.ViewRegenerate;

public class ContentLayout extends JPanel {

	Register register = new Register();
	FunctionAllocation function = new FunctionAllocation();

	public ContentLayout(){


		new ViewRegenerate(register);

		setLayout(new BorderLayout());

		JPanel registerView = new JPanel();
		registerView.setLayout(new GridLayout(2,2));
		registerView.setBackground(Color.WHITE);

		JLabel memoryLabel = new JLabel(register.getMemoryInfo());
		JLabel calculationLabel = new JLabel(register.getCalculationInfo());
		JLabel remainderLabel = new JLabel(register.getRemainderInfo());
		JLabel numberLabel = new JLabel(register.getNumberInfo());

		calculationLabel.setHorizontalAlignment(JLabel.RIGHT);
		numberLabel.setHorizontalAlignment(JLabel.RIGHT);

		registerView.add(memoryLabel);
		registerView.add(calculationLabel);
		registerView.add(remainderLabel);
		registerView.add(numberLabel);

		add(registerView,BorderLayout.PAGE_START);


		JPanel keyboard = new JPanel();
		keyboard.setLayout(new GridLayout(6,4));

		for(short keyId = 0; keyId < 24; keyId ++){

			KeyAllocation key = new KeyAllocation();
			key.allocate(keyId);

			JButton button = new JButton(key.allocator.label);
			button.addActionListener(new ActionListener(){
				@Override
				public void actionPerformed(ActionEvent e) {
					//register = function.allocate(register, key.allocator.functionId, key.allocator.status);
					switch(key.allocator.functionId){
					case 0:
							register = (new ClearAction(register)).register;
							break;

					case 1:	register = (new NumberAction(register,key.allocator.status)).register;

					case 2:	register = (new OperatorAction(register,key.allocator.status)).register;
							break;

					case 3:	register = (new TransformAction(register,key.allocator.status)).register;
							break;

					case 4:	register = (new MemoryAction(register,key.allocator.status)).register;
							break;
					}

					System.out.println(String.valueOf(key.allocator.functionId) + " " + String.valueOf(key.allocator.status));

					new ViewRegenerate(register);
				}
			});
			keyboard.add(button);

		}

		add(keyboard, BorderLayout.CENTER);

	}

}
